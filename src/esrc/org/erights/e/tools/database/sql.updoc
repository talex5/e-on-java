# Copyright University of Southampton IT Innovation Centre, 2010,
# under the terms of the MIT X license, available from
# http://www.opensource.org/licenses/mit-license.html .........................

pragma.syntax("0.9")

Create an in-memory relational database using HSQLDB (http://hsqldb.org/):

? def driver := <unsafe:org.hsqldb.makejdbcDriver>()
? def connection := driver.connect("jdbc:hsqldb:mem:test", null)

Wrap it with an SQL quasi-parser:

? def makeSql__quasiParser :=
>                  <import:org.erights.e.tools.database.makeSQLQuasiParser>
? def sql__quasiParser := makeSql__quasiParser(connection)
# value: <sql__quasiParser>

Create a test table:

? sql`CREATE TABLE users (
>    id BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) PRIMARY KEY,
>    userName VARCHAR(256) NOT NULL,
>    created DATETIME DEFAULT NOW NOT NULL,
>    karma BIGINT NOT NULL,
>    comments VARCHAR(256) DEFAULT NULL)`

Insert some values:

? for name in ["alice", "bob", "carol"] {
>   sql`INSERT INTO users (userName, karma) VALUES ($name, 0)`
> }

Update one row:

? sql`UPDATE users SET karma=1 WHERE userName='alice'`
# value: 1

Read all the values out:

? for [name, karma] in sql`SELECT userName, karma FROM users ORDER BY id ASC` {
>   println(`$name => $karma`)
> }
# stdout: alice => 1
#         bob => 0
#         carol => 0
#

Get out a single row:

? def lookupUser(name :String) :int {
>   def [id] := sql`SELECT id FROM users WHERE userName=$name`.singleton()
>   return id
> }

? lookupUser("bob")
# value: 1

? lookupUser("fred")
# problem: no rows returned by "SELECT id FROM users WHERE userName=?"

We also get an exception if multiple rows are returned:

? sql`SELECT id FROM users`.singleton()
# problem: multiple rows returned by "SELECT id FROM users"

A default can be provided if there are no rows:
? sql`SELECT id FROM users WHERE userName='david'`.singleton(fn {-1})
# value: -1

But this is still an error:

? sql`SELECT id FROM users`.singleton(fn {-1})
# problem: multiple rows returned by "SELECT id FROM users"

Internally, we're constructing PreparedStatement objects, not doing string
interpolation:

? def query := "SELECT id FROM users"
? sql`${query}`
# problem: <SQLException: unexpected token: ?>

This means we don't have to worry about quoting:

? def ono := "O'No! $@?"
? sql`INSERT INTO users (userName, karma) VALUES ($ono, -5)`
# value: 1

? sql`SELECT id FROM users WHERE karma < 0`.singleton()
# value: [3]

? sql`INSERT INTO users (userName, karma) VALUES ('$$@@', -6)`
? sql`SELECT userName FROM users WHERE karma = -6`.singleton()
# value: ["$@"]

The results of a query can only be used once:

? def rs := sql`SELECT userName FROM users WHERE karma = -6`
? rs.singleton()
# value: ["$@"]
? rs.singleton()
# problem: <SQLException: invalid cursor state: identified cursor is not open>

(for testing, we're going to change the type of a column; this seems to upset
hsqldb if you keep the connection open)

? connection.close()

? def testType(typeSql :String, testValue) {
>   def connection := driver.connect("jdbc:hsqldb:mem:test", null)
>   connection.createStatement().execute(`CREATE TABLE test (value $typeSql)`)
>   def sql__quasiParser := makeSql__quasiParser(connection)
>   try {
>     sql`INSERT INTO test (value) VALUES ($testValue)`
>     def [result] := sql`SELECT value FROM test`.singleton()
>     return result
>   } finally {
>     sql`DROP TABLE test`
>   }
> }

? def makeBigDecimal := <unsafe:java.math.makeBigDecimal>
? testType("TINYINT", 3)
# value: 3
? testType("TINYINT", 3000)
# problem: <SQLDataException: data exception: numeric value out of range>

? testType("SMALLINT", 3)
# value: 3
? testType("INTEGER", 3)
# value: 3
? testType("BIGINT", 3)
# value: 3
? testType("DECIMAL(3,2)", makeBigDecimal(3, 1))
# value: 0.30
? testType("NUMERIC", 3)
# value: 3
? testType("DOUBLE", 3.1)
# value: 3.1
? testType("FLOAT", 3.1)
# value: 3.1
? testType("REAL", 3.1)
# value: 3.1

? testType("BOOLEAN", true)
# value: true
? testType("BINARY(3)", [3, 2])
# value: [3, 2, 0]
? testType("VARBINARY(10)", [3, 2])
# value: [3, 2]
? testType("LONGVARBINARY(10)", [3, 2])
# value: [3, 2]
? def blob := <unsafe:javax.sql.rowset.serial.makeSerialBlob>([1,2,3])
? testType("BLOB", blob)
# value: <a BlobDataID>

? testType("CHAR(3)", "ab")
# value: "ab "
? testType("VARCHAR(10)", "ab" :Twine)
# value: "ab"
? testType("VARCHAR(10)", "ab" :String)
# value: "ab"
? testType("LONGVARCHAR(10)", "ab")
# value: "ab"
? def clob := <unsafe:javax.sql.rowset.serial.makeSerialClob>(['a','b'])
? testType("CLOB", clob)
# value: <a ClobDataID>

? testType("DATE", null) == null
# value: true
? testType("DATE", <unsafe:java.sql.makeDate>(0))
# value: 1970-01-01
? testType("TIME", <unsafe:java.sql.makeTime>(0))
# value: 01:00:00
? testType("TIMESTAMP", <unsafe:java.sql.makeTimestamp>(0))
# value: 1970-01-01 01:00:00.0
