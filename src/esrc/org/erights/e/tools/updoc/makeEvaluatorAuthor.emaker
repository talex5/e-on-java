#!/usr/bin/env rune

pragma.syntax("0.8")

# Copyright 2002 Combex, Inc. under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def EExpr := <type:org.erights.e.elang.evm.EExpr>
def Expr := any[EExpr, Twine, <type:org.quasiliteral.term.Term>]
def propUtils := <import:org.erights.e.tools.collect.propUtils>

def makeTextWriter := <elib:oldeio.makeTextWriter>
def cmdMakerMaker := <elang:cmd.cmdMakerMaker>
def makeEvalContextAuthor := <elang:cmd.makeEvalContextAuthor>

def makeEvaluatorAuthor(gc, auths, options, vat, envExtras :Map) :any {
    
    def makeEvalContext := makeEvalContextAuthor(auths,
                                                 options,
                                                 vat,
                                                 false,      #confined
                                                 true,       #explicitIO
                                                 envExtras)
    def cmdLoopMaker := <elang:cmd.cmdLoopMakerAuthor>(gc)

    var isShutdown := false
    
    def makeEvaluator {
        to run(args, props) :any {

            # Show each expression before evaluating it
            def trace := propUtils.testProp(props, "updoc.trace")

            def progressOut := auths["metaout"]

            def [metaout, metaoutBuf] := makeTextWriter.makeBufferingPair()
            
            def cmdLoop
            def evalContext := makeEvalContext(props, cmdLoop)
            bind cmdLoop := cmdLoopMaker(args,
                                         props,
                                         evalContext.getTopScope(),
                                         true)
            
            def cmdMaker := cmdMakerMaker(cmdLoop,
                                          evalContext.getOptAltoutBuf(),
                                          evalContext.getOptAlterrBuf(),
                                          metaout,
                                          metaout)
            
            def evalPrint(expr :Expr) :vow[boolean] {
                def [exitStatusVow, cmd] :=
                  cmdMaker.makeCmdAnswerer(expr)
                if (cmdLoop.enqueue(cmd)) {
                    exitStatusVow
                } else {
                    cmdLoop.getFinalExitStatusVow()
                }
            }
            
            def evaluator {
                
                /**
                 * Schedules expr to be evaluated as the next top level
                 * command in the evaluator's current scope, and returns a
                 * vow for a textual report of the outcome
                 */
                to evaluateForReport(expr :Expr, expectProblem :boolean) :vow[Tuple[String, boolean]] {
                    cmdLoop.setShowEStack(!expectProblem)

                    if (trace) {
                        progressOut.print(`$expr`)
                    }
                    when (evalPrint(expr)) ->
                      done(exitStatus :boolean) :Tuple[String, boolean] {
                        
                        if (!trace) {
                            progressOut.print(".")
                        }
                        def transcript := metaoutBuf.snapshot()
                        metaoutBuf.setLength(0)
                        [transcript, exitStatus]
                    } catch problem {
                        throw(problem)
                    }
                }
                
                to getCmdLoop() :any { cmdLoop }
            }
        }
    }
}
