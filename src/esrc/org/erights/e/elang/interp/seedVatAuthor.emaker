#!/usr/bin/env rune

pragma.syntax("0.8")

# Copyright 2002 Combex, Inc. under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

def Vat := <type:org.erights.e.elib.vat.Vat>
def runeAuthor := <elang:cmd.runeAuthor>

/**
 *
 */
def virtualSeedVatAuthor(makeVat, seedVat, introducer) :near {

    def virtualSeedVat {

        /**
         * Like seedVat.run/3, but returns a CapTP ref rather than a
         * boot-comm ref.
         */
        to run(vat :Vat, privSrc :String, envExtras :Map) :rcvr {
            def starter := seedVat <- run(vat, `
                def eParser := <elang:syntax.makeEParser>
                introducer.onTheAir()
                def starter {
                    to start(privSrc :String) :String {
                        def privExpr := eParser(privSrc)
                        def result := privExpr.eval(privilegedScope.with(envExtras))
                        def sr := makeSturdyRef.temp(result)
                        return introducer.sturdyToURI(sr)
                    }
                }
            `, [ => envExtras ])
            def uriVow := starter <- start(privSrc)
            def sturdyVow := when (uriVow) -> done(uri :String) :SturdyRef {
                return introducer.sturdyFromURI(uri)
            } catch problem {
                throw(problem)
            }
            return sturdyVow <- getRcvr()
        }

        /** Like run/3, but with envExtras as [].asMap() */
        to run(vat :Vat, privSrc :String) :rcvr {
            return virtualSeedVat(vat, privSrc, [].asMap())
        }

        /**
         * Like run/2, but makes and returns a fresh vat.
         */
        to run(privSrc :String) :Tuple[rcvr, Vat] {
            def vat := makeVat.make("headless", "newVirtualSeedVat")
            return [virtualSeedVat(vat, privSrc), vat]
        }
    }
    return virtualSeedVat
}


/**
 * Makes a seedVat function, for seeding vats in a thread-safe manner
 *
 * @author Mark S. Miller
 */
def seedVatAuthor(<unsafe>) :near {

    def makeVat := <unsafe:org.erights.e.elib.vat.makeVat>
    def makeVatSeeder := <unsafe:org.erights.e.elang.interp.makeVatSeeder>

    def surgeon := <elib:serial.makeSurgeon>.withSrcKit("").diverge()
    surgeon.addLoader(<unsafe:org.erights.e.meta.java.io.makeFileGetter>.getTHE_ONE(), "file__uriGetter")
    surgeon.addLoader(<unsafe>, "unsafe__uriGetter")

    def makePersistentKeyHolder := <unsafe:org.erights.e.elib.serial.makePersistentKeyHolder>
    def pBrand    := makePersistentKeyHolder.getTHE_BRAND()
    def pUnsealer := makePersistentKeyHolder.getTHE_UNSEALER()
    def ImportLoader := <type:org.erights.e.elang.interp.ImportLoader>
    surgeon.addFromSafeScope()
    def persistUncaller {
        to optUncall(obj) :near {
            if (Ref.isNear(obj)) {
                if (obj.__optSealedDispatch(pBrand) =~ box :notNull) {
                    return pUnsealer.unseal(box)
                } else if (obj =~ _ :ImportLoader) {
                    return [&<import>, "get", []]
                }
            } else {
                return null
            }
        }
    }
    surgeon.addUncaller(persistUncaller)

    def seedVat {

        /**
         * Evaluates privSrc in a new privileged scope in the given vat.
         * <p>
         * The privSrc is evaluated as a single expression, not as a series of
         * expressions. The <tt>interp</tt> it has in scope responds only to
         * the getProps() message.
         * <p>
         * envExtras will be serialised using the persistenceSealer, passed
         * to the new vat and added to its privilegedScope. This is mainly to
         * allow loaders for dependencies to be passed easily.
         *
         * @return A remote promise for the value of the expression.
         *         This promise is an inter-vat reference using the
         *         boot-comm-system. Therefore, the value should either be
         *         PassByProxy or DeepPassByCopy, or an error will result in
         *         trying to resolve the promise.
         */
        to run(vat :Vat, privSrc :String, envExtras :Map) :rcvr {
            def envExtrasStr := surgeon.serialize(envExtras)
            def bootstrapCode := `
                def eval(privSrc :String, envExtrasStr) {
                    def eParser := <elang:syntax.makeEParser>
                    def runeAuthor := <elang:cmd.runeAuthor>
                    def makeScopeSetup :=
                      <unsafe:org.erights.e.elang.interp.makeScopeSetup>

                    def makeTextWriter := <elib:oldeio.makeTextWriter>
                    def <ue> := <unsafe:org.erights.e.*>
                    def makePrintStreamWriter :=
                      <ue:develop.exception.makePrintStreamWriter>

                    def metain := makePrintStreamWriter.stdin()
                    def metaout := makeTextWriter(makePrintStreamWriter.stdout(), true)
                    def metaerr := makeTextWriter(makePrintStreamWriter.stderr(), true)


                    def privScope := makeScopeSetup.privileged("__main$$",
                                                               metain,
                                                               metaout,
                                                               metaerr,
                                                               interp.getProps(),
                                                               interp,
                                                               null)

                    def envExtras := eParser(envExtrasStr).eval(privScope)

                    def privExpr := eParser(privSrc)
                    return privExpr.eval(privScope.with(envExtras))
                }
            `
            def sysProps := <unsafe:java.lang.makeSystem>.getProperties()
            def defaultProps := <elib:tables.makeConstMap>.fromProperties(sysProps)

            def eval := vat.seed(makeVatSeeder(bootstrapCode, defaultProps))
            return eval <- (privSrc, envExtrasStr)
        }

        /** Like run/3, but with envExtras as [].asMap() */
        to run(vat :Vat, privSrc :String) :rcvr {
            return seedVat(vat, privSrc, [].asMap())
        }

        /**
         * Like run/2, but makes and returns a fresh vat.
         */
        to run(privSrc :String) :Tuple[rcvr, Vat] {
            def vat := makeVat.make("headless", "newSeedVat")
            return [seedVat(vat, privSrc), vat]
        }

        /**
         * Returns a virtualized seedVat function that acts like seedVat, but
         * returns remote CapTP references rather than remote boot-comm
         * references.
         * <p>
         * We should pass in our own introducer, which should be on the air
         * before run/1 or run/2 is called.
         */
        to virtualize(introducer) :near {
            return virtualSeedVatAuthor(makeVat, seedVat, introducer)
        }
    }
    return seedVat
}
