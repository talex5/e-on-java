? def list := [1, 2, 3]
? [2 * x for x in list]
# value: [2, 4, 6]

? [2 * x for x in list if x > 1]
# value: [4, 6]

? [f for x in [1, "hi", 3] if x =~ f :float64]
# value: [1.0, 3.0]

? [a for x in list]
# problem: Failed: Undefined variable: a

? var store := null
? def iter { to iterate(cb) { store := cb } }
? [x for x in iter]
# value: []
? store(1, 2)
# problem: list comprehension expression is finished

? [x for x:int in [1,2,"a"]]
# problem: <ClassCastException: String doesn't coerce to an int>

? [2 * k => 3 * v for k => v in list]
# value: [0 => 3, 2 => 6, 4 => 9]

? def map := ["alice" => 50, "bob" => 60]
? [v => k for k => v in map]
# value: [50 => "alice", 60 => "bob"]

? def map := ["alice" => 50, "bob" => 50]
? [v => k for k => v in map]
# problem: <IllegalArgumentException: 50 already in map>

? [k => rest for k => v in map if k =~ `a@rest`]
# value: ["alice" => "lice"]

? var store := null
? def iter { to iterate(cb) { store := cb } }
? [x => x for x in iter]
# value: [].asMap()
? store(1, 2)
# problem: map comprehension expression is finished

? [x for x:int in [1,2,"a"]]
# problem: <ClassCastException: String doesn't coerce to an int>
