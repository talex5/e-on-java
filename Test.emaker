def foo(x :float64) {
	traceln(`foo($x)`)
}
foo(3)

#def var validFlag__1 := true
#try {
#    __makeOrderedSpace.op__thru(1, 10).iterate(/** For-loop body */
#    def _ {
#
#        method run(key__3, value__5) {
#            require.run(validFlag__1, "For-loop body isn't valid after for-loop exits.")
#            escape ej__7 {
#                def _ exit ej__7 := key__3
#                def x exit ej__7 := value__5
#                traceln.run(simple__quasiParser.valueMaker("x = ${0}").substitute(__makeList.run(x)))
#                null
#            } catch _ {
#                null
#            }
#        }
#    })
#} finally {
#    validFlag__1 := false
#}

#traceln("hi")
#traceln(`${1+1}`)
#
#if (1 == 1) {
#	try {} finally {}
#	traceln("yes")
#} else {
#	traceln("no")
#}
#
#def a := 1
#{
#	def b := 2
#	traceln(`${a+b}`)
#}
#
#try {
#	traceln("here")
#} finally {
#	traceln("finally")
#}
#
#{
#	def field := 42
#	var slotField := 43
#	def foo {
#		to say() {
#			slotField += 1
#			traceln(`foo says $field, $slotField`)
#		}
#	}
#	foo.say()
#}
#
#var i := 0
#i += 1
#traceln(`i = $i`)
#
#{
#var j := 10
#j += 10
#i += 1
#traceln(`sum = ${i+j}`)
#}

#var x := -1
#escape foo {
#	traceln("in foo")
#	foo(7)
#	null
#	83
#} catch r {
#	x := 100 + r
#}
#traceln(`x = $x`)

#escape foo {
#	def x :String exit foo := 3
#} catch reason {
#	traceln(`reason = $reason`)
#}

#for x in 1..10 {
#	traceln(`x = $x`)
#}

#traceln(`got: ${escape foo {
#	foo(7)
#	1+1
#	3+40
#}}`)

#catch result {
#	traceln(`catch: $result`)
#	8
#}

#traceln(`x = $x`)

#for x in 1..10 {
#	traceln(`x = $x`)
#}
